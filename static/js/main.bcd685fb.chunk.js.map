{"version":3,"sources":["fs/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["directoryHandle","a","result","values","handle","push","compareFileSystemEntries","b","kind","name","toLowerCase","FileSystemEntryView","memo","defaultIsExpanded","useState","Array","entries","setEntries","useDisclosure","defaultIsOpen","isOpen","onToggle","useEffect","cancelled","getDirectoryContent","then","mt","variant","onClick","leftIcon","size","ml","spacing","length","slice","sort","map","fontSize","color","verifyPermission","fileHandle","readWrite","options","mode","queryPermission","requestPermission","IDB_RECENT_PROJECTS","App","recentProjects","setRecentProjects","setHandle","setHandleAndUpdateRecents","idbGet","oldHandles","nextValue","h","isSameEntry","idbSet","handleDirectoryOpen","window","showDirectoryPicker","console","error","py","as","Button","rightIcon","handleRecentOpen","my","mb","isInline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcd685fb.chunk.js","sourcesContent":["export function openDirectory(): Promise<FileSystemDirectoryHandle> {\n  return window.showDirectoryPicker();\n}\n\nexport async function getDirectoryContent(\n  directoryHandle: FileSystemDirectoryHandle\n) {\n  const result = [];\n  for await (const handle of directoryHandle.values()) {\n    result.push(handle);\n  }\n  return result;\n}\n","import { useEffect, useState, memo } from \"react\";\nimport { get as idbGet, set as idbSet } from \"idb-keyval\";\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Heading,\n  List,\n  ListItem,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Stack,\n  Text,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { FaFolderOpen, FaFolder, FaFile, FaChevronDown } from \"react-icons/fa\";\n\nimport { getDirectoryContent, openDirectory } from \"./fs\";\n\nconst compareFileSystemEntries = (\n  a: FileSystemHandle,\n  b: FileSystemHandle\n): 1 | -1 => {\n  if (a.kind === b.kind) {\n    return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n  }\n  return a.kind === \"directory\" ? -1 : 1;\n};\n\nconst FileSystemEntryView = memo(function FileSystemEntryView({\n  handle,\n  defaultIsExpanded,\n}: {\n  handle: FileSystemDirectoryHandle | FileSystemFileHandle;\n  defaultIsExpanded?: boolean;\n}) {\n  const [entries, setEntries] = useState(\n    Array<FileSystemDirectoryHandle | FileSystemFileHandle>()\n  );\n  const { isOpen, onToggle } = useDisclosure({\n    defaultIsOpen: defaultIsExpanded,\n  });\n\n  useEffect(() => {\n    let cancelled = false;\n    if (handle.kind === \"directory\") {\n      getDirectoryContent(handle).then((entries) => {\n        if (!cancelled) setEntries(entries);\n      });\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [handle]);\n\n  return (\n    <ListItem mt={1}>\n      {handle.kind === \"directory\" ? (\n        <Button\n          variant=\"outline\"\n          onClick={onToggle}\n          leftIcon={<FaFolder />}\n          size=\"xs\"\n        >\n          {handle.name}\n        </Button>\n      ) : (\n        <Button variant=\"outline\" leftIcon={<FaFile />} size=\"xs\">\n          {handle.name}\n        </Button>\n      )}\n\n      {isOpen && (\n        <List ml={6} spacing={1}>\n          {entries.length > 0 ? (\n            entries\n              .slice()\n              .sort(compareFileSystemEntries)\n              .map((handle) => (\n                <FileSystemEntryView key={handle.name} handle={handle} />\n              ))\n          ) : (\n            <Text fontSize=\"xs\" color=\"gray.500\">\n              empty\n            </Text>\n          )}\n        </List>\n      )}\n    </ListItem>\n  );\n});\n\nasync function verifyPermission(\n  fileHandle: FileSystemHandle,\n  readWrite: boolean\n) {\n  const options = {\n    mode: readWrite ? \"readwrite\" : \"read\",\n  } as const;\n  // Check if permission was already granted. If so, return true.\n  if ((await fileHandle.queryPermission(options)) === \"granted\") {\n    return true;\n  }\n  // Request permission. If the user grants permission, return true.\n  if ((await fileHandle.requestPermission(options)) === \"granted\") {\n    return true;\n  }\n  // The user didn't grant permission, so return false.\n  return false;\n}\n\nconst IDB_RECENT_PROJECTS = \"recentProjects\";\n\nfunction App() {\n  const [recentProjects, setRecentProjects] = useState(\n    Array<FileSystemHandle>()\n  );\n  const [handle, setHandle] =\n    useState<FileSystemFileHandle | FileSystemDirectoryHandle>();\n\n  useEffect(() => {\n    idbGet(IDB_RECENT_PROJECTS).then((result) => {\n      setRecentProjects(result ?? []);\n    }, console.error);\n  }, []);\n\n  async function setHandleAndUpdateRecents(handle: FileSystemHandle) {\n    setHandle(handle);\n\n    const oldHandles = await idbGet<FileSystemHandle[]>(IDB_RECENT_PROJECTS);\n    const nextValue = [handle] as FileSystemHandle[];\n    if (oldHandles) {\n      for (const h of oldHandles) {\n        if (await h.isSameEntry(handle)) {\n          continue;\n        }\n        nextValue.push(h);\n      }\n    }\n    await idbSet(IDB_RECENT_PROJECTS, nextValue);\n    setRecentProjects(nextValue);\n  }\n\n  function handleDirectoryOpen() {\n    openDirectory().then(setHandleAndUpdateRecents);\n  }\n\n  if (!handle) {\n    return (\n      <Container py={10}>\n        <Button leftIcon={<FaFolderOpen />} onClick={handleDirectoryOpen}>\n          Open project\n        </Button>\n        <Divider my={4} />\n        <Heading size=\"md\" mb={2}>\n          Recent Projects\n        </Heading>\n        <Stack isInline>\n          {recentProjects.map((handle) => (\n            <Button\n              key={handle.name}\n              leftIcon={<FaFolder />}\n              onClick={() => {\n                handleRecentOpen(handle);\n              }}\n            >\n              {handle.name}\n            </Button>\n          ))}\n        </Stack>\n      </Container>\n    );\n  }\n\n  return (\n    <Container py={10}>\n      <Button leftIcon={<FaFolderOpen />} onClick={handleDirectoryOpen}>\n        Open project\n      </Button>\n      <Menu>\n        <MenuButton as={Button} rightIcon={<FaChevronDown />} ml={4}>\n          Recent projects\n        </MenuButton>\n        <MenuList>\n          {recentProjects.map((handle) => (\n            <MenuItem\n              key={handle.name}\n              onClick={() => handleRecentOpen(handle)}\n            >\n              {handle.name}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n\n      <List my={4}>\n        <FileSystemEntryView handle={handle} defaultIsExpanded />\n      </List>\n    </Container>\n  );\n\n  async function handleRecentOpen(handle: FileSystemHandle) {\n    const hasAccess = await verifyPermission(handle, true);\n    if (hasAccess) {\n      setHandleAndUpdateRecents(handle);\n    }\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}